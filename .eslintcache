[{"/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/index.js":"1","/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/index.js":"2","/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/header.js":"3","/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/section.js":"4","/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/footer.js":"5"},{"size":238,"mtime":1628244676826,"results":"6","hashOfConfig":"7"},{"size":871,"mtime":1628244611417,"results":"8","hashOfConfig":"7"},{"size":707,"mtime":1628244594032,"results":"9","hashOfConfig":"7"},{"size":2180,"mtime":1628244594032,"results":"10","hashOfConfig":"7"},{"size":346,"mtime":1628244594032,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xkpcqu",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},"/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/index.js",[],"/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/index.js",[],"/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/header.js",[],["25","26"],"/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/section.js",["27","28"],"import React, { useMemo } from 'react'\n\n\nconst Section = ({todos, setTodos}) => {\n  console.log('render section');\n\n  const listLength = useMemo(() => {\n    let todoCount = 0 , doneCount = 0\n    todos.forEach(item => {\n      item.done ? doneCount++ : todoCount++\n    })\n    return [todoCount, doneCount]\n  } , [todos])\n\n  function save(arr) {\n    localStorage.setItem(\"__todo__\",JSON.stringify(arr));\n    setTodos(arr)\n  }\n  function remove(index){\n    let arr = [...todos]\n    arr.splice(index,1)\n    save(arr)\n  }\n\n  function checkChange(index, status) {\n    let arr = [...todos]\n    arr[index].done = status\n    save(arr)\n  }\n\n  function focus(index){\n    let arr = [...todos]\n    arr[index].titleInput = true\n    setTodos([...arr])\n  }\n  function blur(e, index){\n    let arr = [...todos]\n    arr[index].titleInput = false\n    arr[index].title = e.target.value\n    save(arr)\n  }\n\n\n  return (\n    <section>\n      <h2>正在进行 <span id=\"todocount\">{listLength[0]}</span></h2>\n      <ol id=\"todolist\" className=\"demo-box\">\n        {todos.map((item, index) => {\n          return (\n            !item.done && \n            <li draggable={false} key={index}>\n              <input type='checkbox' onChange={ () => checkChange(index, true)} />\n              <p id={'p-' + index} onClick={ () =>  focus(index)} >{ item.title }\n                { item.titleInput && <input defaultValue={item.title} type=\"text\" onBlur={e => blur(e, index)} autoFocus/>}\n              </p>\n              <a onClick={ () => remove(index) }>-</a>\n            </li>\n          )\n        })}\n      </ol>\n      <h2>已经完成 <span id=\"donecount\">{listLength[1]}</span></h2>\n        <ul className=\"donelist\">\n          {todos.map((item, index) => {\n            return (\n              item.done && \n              <li draggable={false} key={index}>\n                <input type='checkbox' onChange={ () => checkChange(index ,false)} defaultChecked='checked' />\n                <p id={'p-' + index} >{ item.title }</p>\n                <a onClick={ () => remove(index) }>-</a>\n              </li>\n            )\n          })}\n        </ul>\n\t\t\t<ul id=\"donelist\"></ul>\n    </section>\n  )\n}\n  \nexport default Section\n","/Volumes/Hard disk/Frame/React/react-hooks-todoList/src/pages/Todo/footer.js",["29"],"import React from 'react'\nconst Footer = () => {  \n  console.log('render footer');\n  function clear(){\n    localStorage.clear();\n    window.location.reload()\n  }\n  return (\n    <footer>\n\t\t\tCopyright &copy; 2014 todolist.cn <a onClick={clear} style={{cursor: 'pointer'}}> &nbsp; Clear All </a>\n\t\t</footer>\n  )\n}\n\nexport default React.memo(Footer)\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":56,"column":15,"nodeType":"36","endLine":56,"endColumn":50},{"ruleId":"34","severity":1,"message":"35","line":69,"column":17,"nodeType":"36","endLine":69,"endColumn":52},{"ruleId":"34","severity":1,"message":"35","line":10,"column":38,"nodeType":"36","endLine":10,"endColumn":85},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]